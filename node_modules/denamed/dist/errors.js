"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsExceptionError = exports.DnsRefusedError = exports.DnsNotImplementedError = exports.DnsNoNameError = exports.DnsCannotProcessError = exports.DnsProtocolError = exports.DnsError = void 0;
class DnsError extends Error {
    constructor(name, code, msg, caller) {
        super();
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, caller || DnsError);
        }
        this.code = code;
        this.name = name;
        this.message = msg || name;
    }
}
exports.DnsError = DnsError;
class DnsProtocolError extends DnsError {
    constructor(message, caller) {
        super("DnsProtocolError", 1, message ?? "Dns Protocol Error", caller ?? DnsProtocolError);
    }
}
exports.DnsProtocolError = DnsProtocolError;
class DnsCannotProcessError extends DnsError {
    constructor(message, caller) {
        super("DnsCannotProcessError", 2, message ?? "Dns Cannot Process", caller ?? DnsCannotProcessError);
    }
}
exports.DnsCannotProcessError = DnsCannotProcessError;
class DnsNoNameError extends DnsError {
    constructor(message, caller) {
        super("DnsNoNameError", 3, message ?? "Dns No Name", caller ?? DnsNoNameError);
    }
}
exports.DnsNoNameError = DnsNoNameError;
class DnsNotImplementedError extends DnsError {
    constructor(message, caller) {
        super("DnsNotImplementedError", 4, message ?? "Dns Not Implemented", caller ?? DnsNotImplementedError);
    }
}
exports.DnsNotImplementedError = DnsNotImplementedError;
class DnsRefusedError extends DnsError {
    constructor(message, caller) {
        super("DnsRefusedError", 5, message ?? "Dns Refused", caller ?? DnsRefusedError);
    }
}
exports.DnsRefusedError = DnsRefusedError;
class DnsExceptionError extends DnsError {
    constructor(message, caller) {
        super("DnsExceptionError", 6, message ?? "Dns Exception", caller ?? DnsExceptionError);
    }
}
exports.DnsExceptionError = DnsExceptionError;
//# sourceMappingURL=errors.js.map