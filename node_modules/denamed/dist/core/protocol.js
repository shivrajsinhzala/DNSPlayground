"use strict";
/*

  # Protocol

  Stores protocol definitions and their primitives as well as any other
  associated protocol constants

  ## References

  http://tools.ietf.org/html/rfc1035
  http://tools.ietf.org/html/rfc4408
  http://tools.ietf.org/html/rfc2782
  http://tools.ietf.org/html/rfc3596

  ## Notes

  * Even though RFC1035 says that questions should support multiple queries, the
  reality is *nobody* does this. MS DNS doesn't support it and apparently BIND
  doesn't support it as well. That implies no client side tools do either - so
  we will not worry about that complication.

  * DNS Extensions have been proposed, but another case of chicken-and-egg.
  These extensions make it _possible_ to have DNS queries over 512 bytes in
  length, but because it is not universally supported, nobody does it.

*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsClass = exports.ResponseCode = exports.OperationCode = exports.QueryResponseFlag = exports.InverseQueryMap = exports.QueryTypes = void 0;
exports.QueryTypes = {
    A: 0x01,
    NS: 0x02,
    MD: 0x03,
    MF: 0x04,
    CNAME: 0x05,
    SOA: 0x06,
    MB: 0x07,
    MG: 0x08,
    MR: 0x09,
    NULL: 0x0a,
    WKS: 0x0b,
    PTR: 0x0c,
    HINFO: 0x0d,
    MINFO: 0x0e,
    MX: 0x0f,
    TXT: 0x10,
    AAAA: 0x1c,
    SRV: 0x21,
    AXFR: 0xfc,
    MAILA: 0xfe,
    MAILB: 0xfd,
    ANY: 0xff,
    OPT: 0x29,
};
exports.InverseQueryMap = Object.keys(exports.QueryTypes).reduce((map, key) => {
    map[exports.QueryTypes[key]] = key;
    return map;
}, {});
var QueryResponseFlag;
(function (QueryResponseFlag) {
    QueryResponseFlag[QueryResponseFlag["Query"] = 0] = "Query";
    QueryResponseFlag[QueryResponseFlag["Response"] = 1] = "Response";
})(QueryResponseFlag = exports.QueryResponseFlag || (exports.QueryResponseFlag = {}));
/**
 * OPCODE
 */
var OperationCode;
(function (OperationCode) {
    OperationCode[OperationCode["StandardQuery"] = 0] = "StandardQuery";
    OperationCode[OperationCode["ServerStatus"] = 2] = "ServerStatus";
    OperationCode[OperationCode["Notify"] = 4] = "Notify";
    OperationCode[OperationCode["Update"] = 5] = "Update";
    OperationCode[OperationCode["DSO"] = 6] = "DSO";
})(OperationCode = exports.OperationCode || (exports.OperationCode = {}));
/**
 * RCODE
 */
var ResponseCode;
(function (ResponseCode) {
    ResponseCode[ResponseCode["Okay"] = 0] = "Okay";
    ResponseCode[ResponseCode["FormatError"] = 1] = "FormatError";
    ResponseCode[ResponseCode["ServerFailure"] = 2] = "ServerFailure";
    ResponseCode[ResponseCode["NotFound"] = 3] = "NotFound";
    ResponseCode[ResponseCode["NotImplemented"] = 4] = "NotImplemented";
    ResponseCode[ResponseCode["Refused"] = 5] = "Refused";
    ResponseCode[ResponseCode["YXDomain"] = 6] = "YXDomain";
    ResponseCode[ResponseCode["YXRRSet"] = 7] = "YXRRSet";
    ResponseCode[ResponseCode["NXRRSet"] = 8] = "NXRRSet";
    ResponseCode[ResponseCode["NotAuthority"] = 9] = "NotAuthority";
    ResponseCode[ResponseCode["NotInZone"] = 10] = "NotInZone";
    ResponseCode[ResponseCode["BadSig"] = 16] = "BadSig";
    ResponseCode[ResponseCode["BadKey"] = 17] = "BadKey";
    ResponseCode[ResponseCode["BadTime"] = 18] = "BadTime";
    ResponseCode[ResponseCode["BadMode"] = 19] = "BadMode";
    ResponseCode[ResponseCode["BadName"] = 20] = "BadName";
    ResponseCode[ResponseCode["BadAlgorithm"] = 21] = "BadAlgorithm";
    ResponseCode[ResponseCode["BadTruncation"] = 22] = "BadTruncation";
    ResponseCode[ResponseCode["BadCookie"] = 23] = "BadCookie";
})(ResponseCode = exports.ResponseCode || (exports.ResponseCode = {}));
var DnsClass;
(function (DnsClass) {
    DnsClass[DnsClass["Internet"] = 1] = "Internet";
})(DnsClass = exports.DnsClass || (exports.DnsClass = {}));
//# sourceMappingURL=protocol.js.map