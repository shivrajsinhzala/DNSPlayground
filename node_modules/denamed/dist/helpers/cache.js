"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCache = void 0;
const query_1 = require("../query");
function useCache(handler, cacheOptions) {
    const cache = cacheOptions?.cache ?? new Map();
    let cleanCacheTimer;
    return async (query, source) => {
        const question = query.questions[0];
        const key = question.type + ":" + question.name;
        const existing = cache.get(key);
        const time = Date.now();
        if (existing && time < existing.expires) {
            return query_1.createResponse(query, existing.answers.map((answer) => ({
                ...answer,
                ttl: Math.floor(answer.ttl - (time - existing.created) / 1000),
            })));
        }
        const result = await handler(query, source);
        const entry = {
            answers: result.answers,
            created: time,
            expires: result.answers?.reduce((expires, answer) => expires === 0 || expires > time + answer.ttl * 1000
                ? time + answer.ttl * 1000
                : expires, 0) ?? 0,
        };
        cache.set(key, entry);
        if (!cleanCacheTimer && !cacheOptions?.cache) {
            cleanCacheTimer = setTimeout(() => {
                const now = Date.now();
                const map = cache;
                for (let [key, value] of map) {
                    if (value.expires < now) {
                        map.delete(key);
                    }
                }
                cleanCacheTimer = undefined;
            }, Math.min(entry.expires - time + 1000, 60 * 1000));
        }
        return result;
    };
}
exports.useCache = useCache;
//# sourceMappingURL=cache.js.map